from aiogram import Router, F
from aiogram.types import Message, ContentType, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, \
    InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import get_db_connection, set_driver_availability, save_user
import os
import logging
from dotenv import load_dotenv
from aiogram.filters import Command
from datetime import datetime, timedelta


load_dotenv()
ADMIN_ID = int(os.getenv("ADMIN_ID"))

router = Router()


class DriverReg(StatesGroup):
    name = State()
    phone = State()
    passport = State()
    car = State()
    payment = State()
    waiting_approval = State()
    route = State()
    price = State()


# –§—É–Ω–∫—Ü–∏–∏ –¥–æ driver_payment –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.message(DriverReg.name)
async def driver_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name or not name.isalpha():
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(name=name)
    await state.set_state(DriverReg.phone)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)


@router.message(F.contact, DriverReg.phone)
async def driver_phone(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'.")
        return
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await state.set_state(DriverReg.passport)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤.")


@router.message(DriverReg.passport, F.content_type == ContentType.PHOTO)
async def driver_passport(message: Message, state: FSMContext):
    passport_photo = message.photo[-1].file_id
    await state.update_data(passport=passport_photo)
    await state.set_state(DriverReg.car)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")


@router.message(DriverReg.car)
async def driver_car(message: Message, state: FSMContext):
    car = message.text.strip()
    if len(car) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
        return
    await state.update_data(car=car)
    await state.set_state(DriverReg.payment)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–ø–ª–∞—Ç—ã.")


@router.message(DriverReg.payment, F.content_type == ContentType.PHOTO)
async def driver_payment(message: Message, state: FSMContext):
    payment_photo = message.photo[-1].file_id
    data = await state.get_data()
    success, error_message = await save_user(message.from_user.id, "driver", data["name"], data["phone"], data["car"], None)
    if not success:
        await message.answer(error_message)  # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await state.clear()
        return

    conn = await get_db_connection()
    await conn.execute("""
            UPDATE users SET passport=?, payment=?, available=?
            WHERE user_id=?
        """, (data["passport"], payment_photo, 0, message.from_user.id))
    await conn.commit()
    await conn.close()

    await state.set_state(DriverReg.waiting_approval)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{message.from_user.id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.from_user.id}")]
    ])

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ 18:00
    now = datetime.now()
    today_18 = now.replace(hour=18, minute=0, second=0, microsecond=0)
    if now > today_18:
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ–∑–∂–µ 18:00, —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω ‚Äî 18:00 –∑–∞–≤—Ç—Ä–∞
        today_18 += timedelta(days=1)
    time_until_18 = today_18 - now
    hours_until_18 = time_until_18.seconds // 3600
    minutes_until_18 = (time_until_18.seconds % 3600) // 60

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
    if now.hour < 18:
        admin_message = f"‚è≥ –ê–¥–º–∏–Ω –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ 18:00 (—á–µ—Ä–µ–∑ {hours_until_18} —á {minutes_until_18} –º–∏–Ω) –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    else:
        admin_message = "‚è≥ –ê–¥–º–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ 18:00 –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."

    try:
        await message.bot.send_photo(
            ADMIN_ID,
            photo=data["passport"],
            caption=f"üîî –ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è!\n\n"
                    f"üë§ –ò–º—è: {data['name']}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                    f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {data['car']}\n\n"
                    f"üìÑ –¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç –∏ –ø—Ä–∞–≤–∞ (–≤—ã—à–µ)\n\n"
                    f"üí∞ –ß–µ–∫ –æ–ø–ª–∞—Ç—ã (–Ω–∏–∂–µ)",
            reply_markup=keyboard
        )
        await message.bot.send_photo(ADMIN_ID, photo=payment_photo)
        await message.answer(
            f"‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.\n"
            f"{admin_message}\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="cancel_driver_reg")]
            ])
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.callback_query(lambda c: c.data.startswith("approve_"))
async def approve_driver(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    conn = await get_db_connection()
    await conn.execute("UPDATE users SET available=1 WHERE user_id=?", (user_id,))
    await conn.commit()
    await conn.close()
    try:
        await callback.message.bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–∞—Ä—à—Ä—É—Ç:")
        await state.set_state(DriverReg.route)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõ´ –¢–∞—à–∫–µ–Ω—Ç ‚û°Ô∏è –ù—É–∫—É—Å üõ¨", callback_data="driver_route_tashkent_nukus")],
            [InlineKeyboardButton(text="üõ´ –ù—É–∫—É—Å ‚û°Ô∏è –¢–∞—à–∫–µ–Ω—Ç üõ¨", callback_data="driver_route_nukus_tashkent")]
        ])
        await callback.message.bot.send_message(user_id, "üöñ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=keyboard)
        await callback.message.bot.send_message(callback.from_user.id, "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.bot.send_message(callback.from_user.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è {user_id}")
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("driver_route_"))
async def choose_driver_route(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    new_route = "üõ´ –¢–∞—à–∫–µ–Ω—Ç ‚û°Ô∏è –ù—É–∫—É—Å üõ¨" if callback.data == "driver_route_tashkent_nukus" else "üõ´ –ù—É–∫—É—Å ‚û°Ô∏è –¢–∞—à–∫–µ–Ω—Ç üõ¨"
    conn = await get_db_connection()
    try:
        cursor = await conn.execute("SELECT route FROM users WHERE user_id=?", (user_id,))
        current_route = (await cursor.fetchone())[0]
        if current_route and current_route != new_route:
            arrival_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            await conn.execute(
                "UPDATE users SET route=?, last_arrival_time=? WHERE user_id=?",
                (new_route, arrival_time, user_id)
            )
        else:
            await conn.execute("UPDATE users SET route=? WHERE user_id=?", (new_route, user_id))
        await conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è {user_id}: {e}")
    finally:
        await conn.close()

    # –°—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    await state.set_state(DriverReg.price)
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à –º–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: \n{new_route}.\n\nüíµ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∑–∞ –ø–æ–µ–∑–¥–∫—É (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 100000):")
    await state.update_data(route=new_route)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await callback.answer()


@router.message(DriverReg.price)
async def driver_price(message: Message, state: FSMContext):
    try:
        price = int(message.text.strip())
        if price <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_id = message.from_user.id
    data = await state.get_data()
    route = data.get("route")  # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = await get_db_connection()
    try:
        await conn.execute("UPDATE users SET price=? WHERE user_id=?", (price, user_id))
        await conn.commit()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏ —Å—É–º–º—É", callback_data="change_driver_route")],
            [InlineKeyboardButton(text="üö´ –ù–µ —Ä–∞–±–æ—Ç–∞—é", callback_data="driver_busy")]
        ])
        await message.answer(
            f"‚úÖ –í–∞—à –º–∞—Ä—à—Ä—É—Ç –∏ —Å—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
            f"üõ£ –ú–∞—Ä—à—Ä—É—Ç: {route}\n"
            f"üíµ –°—É–º–º–∞: {price} —Å—É–º\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—É–º–º—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await conn.close()
    await state.clear()


@router.callback_query(lambda c: c.data == "change_driver_route")
async def change_driver_route(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ´ –¢–∞—à–∫–µ–Ω—Ç ‚û°Ô∏è –ù—É–∫—É—Å üõ¨", callback_data="driver_route_tashkent_nukus")],
        [InlineKeyboardButton(text="üõ´ –ù—É–∫—É—Å ‚û°Ô∏è –¢–∞—à–∫–µ–Ω—Ç üõ¨", callback_data="driver_route_nukus_tashkent")]
    ])
    await callback.message.edit_text("üöñ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(lambda c: c.data == "driver_busy")
async def driver_set_busy(callback: CallbackQuery):
    user_id = callback.from_user.id
    await set_driver_availability(user_id, False)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É", callback_data="driver_available")]
    ])
    await callback.message.edit_text(
        "üö´ –í—ã —Ç–µ–ø–µ—Ä—å **–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ**. \n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ \n'‚úÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É'.",
        reply_markup=keyboard)
    await callback.answer()


@router.callback_query(lambda c: c.data == "driver_available")
async def driver_set_available(callback: CallbackQuery):
    user_id = callback.from_user.id
    await set_driver_availability(user_id, True)
    conn = await get_db_connection()
    try:
        cursor = await conn.execute("SELECT route, price FROM users WHERE user_id=?", (user_id,))
        row = await cursor.fetchone()
        current_route = row[0] if row else "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        current_price = row[1] if row[1] is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è {user_id}: {e}")
        current_route = "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        current_price = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    finally:
        await conn.close()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏ —Å—É–º–º—É", callback_data="change_driver_route")],
        [InlineKeyboardButton(text="üö´ –ù–µ —Ä–∞–±–æ—Ç–∞—é", callback_data="driver_busy")]
    ])
    await callback.message.edit_text(
        f"‚úÖ –í—ã **–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É**.\n"
        f"üõ£ –í–∞—à –º–∞—Ä—à—Ä—É—Ç: {current_route}\n"
        f"üíµ –°—É–º–º–∞: {current_price} —Å—É–º\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    await state.clear()
    conn = await get_db_connection()
    try:
        await conn.execute("DELETE FROM users WHERE user_id=?", (message.from_user.id,))
        await conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
    finally:
        await conn.close()
    await message.answer("‚ùå –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")